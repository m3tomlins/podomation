<joblist>
  <job>
    <context>
      <options preserveOrder='true'>
        <option enforcedvalues='true' name='episode' required='true' valuesUrl='file:/mnt/CauseAScene/Podomation/episodes.json'>
          <label>episode</label>
        </option>
        <option enforcedvalues='true' name='transcribe' required='true' value='false' values='false,true' valuesListDelimiter=','>
          <description>y/n - run transcription after creating the .mp3</description>
          <label>transcribe</label>
        </option>
        <option enforcedvalues='true' name='replace' required='true' value='false' values='false,true' valuesListDelimiter=','>
          <description>y/n - replace the current audio file in production</description>
          <label>replace</label>
        </option>
      </options>
    </context>
    <defaultTab>output</defaultTab>
    <description></description>
    <dispatch>
      <excludePrecedence>true</excludePrecedence>
      <keepgoing>false</keepgoing>
      <rankOrder>ascending</rankOrder>
      <successOnEmptyNodeFilter>false</successOnEmptyNodeFilter>
      <threadcount>1</threadcount>
    </dispatch>
    <executionEnabled>true</executionEnabled>
    <loglevel>INFO</loglevel>
    <name>Podomater</name>
    <nodeFilterEditable>false</nodeFilterEditable>
    <nodefilters>
      <filter>name: podomation</filter>
    </nodefilters>
    <nodesSelectedByDefault>true</nodesSelectedByDefault>
    <plugins />
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <description>Podomate</description>
        <script><![CDATA[#!/bin/bash
source ~/.profile
export S3_MEDIA_PATH="CauseAScenePod"
export S3_BUCKET="misc.jmglov.net"
export AWS_PROFILE="causeascene"
episode=@option.episode@
show="/mnt/CauseAScene"
podomation="${show}/Podomation"
clips="${podomation}/clips"
images="${podomation}/images"
episodes="${podomation}/episodes"
episode_folder="${episodes}/${episode}"
backups="${episode_folder}/backups"

## CD INTO EPISODE FOLDER
cd ${episode_folder}
info_file=${episode}.info

## IF THE INFO FILE DOESN'T EXIST - ABORT
if [ ! -f ${info_file} ]; then
	echo "ERROR: ${info_file} does not exist!!"
	exit;
fi

## COPY SEGMENT FILES FROM CUBASE PROJECTS TO EPISODE FOLDER
if [ -d "${show}/Cubase\ Projects/${episode}/Audio" ]; then
    cp ${show}/Cubase\ Projects/${episode}/Audio/Segment*.wav  ${episode_folder}/.
fi

## PARSE THE CLIP INFO AND CREATE A SOX SCRIPT
sox_script="sox.sh"
echo -e "#!/bin/bash\nsox --combine mix --no-show-progress \\" > ${sox_script}
elapsed="0"
for clip in $(cat ${info_file} | grep CLIP); do
	clip_num=$(echo ${clip} | cut -d"_" -f2 | cut -d"=" -f1)
	clip_file=$(echo ${clip} | cut -d"=" -f2 | cut -d"," -f1)
	clip_pad=$(echo ${clip} | cut -d"," -f2 | cut -d"=" -f2)
	clip_duration=$(soxi -D ${podomation}/${clip_file})
	padding=$(echo ${elapsed} - ${clip_pad} | bc)
 	echo -e "${sox_cmd}\"|sox ${podomation}/${clip_file} -p pad ${padding} 0\" \\" >> ${sox_script}
	echo "ADDED: ${podomation}/${clip_file} at ${padding} seconds"
	elapsed=$(echo ${elapsed} + ${clip_duration} - ${clip_pad} | bc)
done

## GET THE MEDIA TYPE
type=$(cat ${info_file} | grep MEDIA_TYPE | cut -d"=" -f2)

## CLEAN CURRENT FILES FROM GOOGLE DRIVE
if [ -f "${show}/Google Drive/Podcast Production/Ready to Post/${episode}.${type}" ];then
    echo "REMOVING: ${episode}.${type} from Google Drive -> Ready to Post..."
    rm -f "${show}/Google Drive/Podcast Production/Ready to Post/${episode}.${type}"
fi
if [ -f "${show}/Google Drive/Podcast Production/Ready to Post/${episode}.mp4" ];then
    echo "REMOVING: ${episode}.mp4 from Google Drive -> Ready to Post..."
    rm -f "${show}/Google Drive/Podcast Production/Ready to Post/${episode}.mp4"
fi

## MIX IT ALL DOWN WITH -3db Normalization
mixdown_wav="/tmp/mixdown_${RANDOM}.wav"
echo -e "${mixdown_wav} gain -n -3" >> ${sox_script}
echo "MIXING DOWN to ${mixdown_wav}...."
$(. ${sox_script} 2>&1)

echo "CREATED THE REMIX WAVE"
ls -al ${mixdown_wav}

## BACKUP ANY EXISTING MIXDOWN
if [ ! -d ${backups} ]; then
	echo "CREATED BACKUP DIRECTORY"
	mkdir ${backups}
fi

if [ -f ${episode}.${type} ]; then
	echo "BACKING UP CURRENT ${episode}.${type}"
	mv ${episode}.${type} ${episode}.${type}.tmp
fi

## CONVERT THE NEW MIXDOWN TO TARGET FORMAT
echo "CONVERTING TO ${episode}.${type}..."
case ${type} in
	mp3)
		# Converting from WAV to MP3
		newmedia=${episode}.mp3
		sox --no-show-progress -S ${mixdown_wav} -c 2 -C ${bitrate}.01 -t mp3 ${newmedia} 2>&1
		#size=$(wc -c ${newmedia} | xargs | cut -d" " -f1)
		#duration=$(soxi -D ${newmedia})
		#bitrate=$(soxi -B ${newmedia} | sed -e 's/k//g')
	;;
	m4a)
		# Converting from WAV to M4A
		newmedia=${episode}.m4a
		ffmpeg -y -v warning -i ${mixdown_wav} -ar 44100 ${newmedia}
		#size=$(wc -c ${newmedia} | xargs | cut -d" " -f1)
		#duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${newmedia})
		#bitrate=$(( $(ffprobe -v error -show_entries format=bit_rate -of default=noprint_wrappers=1:nokey=1 ${newmedia}) / 1000))
	;;
	*)
		echo "ERROR: TYPE $type IS NOT SUPPORTED!"
	;;
esac

## MAKE A BACKUP THE NEW MEDIA FILE
cp ${newmedia} ${backups}/${newmedia}.$(date '+%Y%m%d%H%M%S')

## COPY TO THE GOOGLE DRIVE
echo "COPYING: uploading ${newmedia} to Google Drive -> Ready to Post..."
cp ${newmedia} "${show}/Google Drive/Podcast Production/Ready to Post/."
chmod 666 "${show}/Google Drive/Podcast Production/Ready to Post/${newmedia}"

## CREATE AUDIOGRAM IF THE .ASS FILE EXISTS
if [ -f audiogram.ass ]; then
    background_image="${images}/causeascenePOD.png"
    audiogram_tmp="/tmp/audiogram_${RANDOM}.mp4"
    ffmpeg -y -v warning -i audiogram.wav -loop 1 -i ${background_image} -filter_complex "[0:a]showwaves=s=720x220:mode=line:colors=white,format=yuva420p[v];[1:v][v]overlay=0:400[outv]" -map "[outv]" -pix_fmt yuv420p -map 0:a -c:v libx264 -shortest ${audiogram_tmp}
    ffmpeg -y -v warning -i ${audiogram_tmp} -vf ass=audiogram.ass ${episode}_Audiogram.mp4
    ls -al ${episode}_Audiogram.mp4
    echo "COPYING: uploading ${episode}.mp4 to Google Drive -> Ready to Post..."
    cp ${episode}_Audiogram.mp4 "${show}/Google Drive/Podcast Production/Ready to Post/."
    chmod 666 "${show}/Google Drive/Podcast Production/Ready to Post/${episode}_Audiogram.mp4"
fi

## TRANSCRIBE THE EPISODE
if [ "@option.transcribe@" == "true" ]; then
    speakers=$(cat ${info_file} | grep SPEAKERS | cut -d"=" -f2)
    num_speakers=$(echo "$speakers" | awk -F "," '{print NF}')
    if [ $num_speakers -gt 1 ]; then
        settings="--settings ShowSpeakerLabels=true,MaxSpeakerLabels=${num_speakers}"
    fi
    aws s3 cp ${newmedia} s3://$S3_BUCKET/$S3_MEDIA_PATH/${episode}.mp3
    aws transcribe start-transcription-job \
        --transcription-job-name ${episode} \
        --language-code en-US \
        --media-format mp3 \
        --media MediaFileUri=s3://$S3_BUCKET/$S3_MEDIA_PATH/${episode}.mp3 \
        --output-bucket-name $S3_BUCKET \
        $settings
fi

## REPLACE MEDIA ON BLUBRRY FTP
if [ "@option.replace@" == "true" ]; then
ftp_host=$(cat ~/upload.credentials | grep ftp_host | cut -d"=" -f2)
ftp_user=$(cat ~/upload.credentials | grep ftp_user | cut -d"=" -f2)
ftp_password=$(cat ~/upload.credentials | grep ftp_password | cut -d"=" -f2)
echo "UPLOADING: ${episode} to ${ftp_host}"
ftp -v -n $ftp_host<<-FTPSCRIPT
quote USER $ftp_user
quote PASS $ftp_password
binary
passive
put ${episode}.${type}
quit
FTPSCRIPT
fi

## remove temp files
if [ -f ${mixdown_wav} ]; then
    rm -f ${mixdown_wav}
fi
if [ -f ${audiogram_tmp} ]; then
    rm -f ${audiogram_tmp}
fi
if [ -f ${episode}.${type}.tmp ]; then
   rm -f ${episode}.${type}.tmp
fi
exit;]]></script>
        <scriptargs />
      </command>
    </sequence>
  </job>
</joblist>
